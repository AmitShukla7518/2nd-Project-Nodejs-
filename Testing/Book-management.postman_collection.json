{
	"info": {
		"_postman_id": "2cb3b2a4-bb08-4ca1-aafe-56ac4bfbc23c",
		"name": "Book-management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"User registration has a correctsuccessful response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.data).exist;",
							"});",
							"",
							"pm.collectionVariables.set(\"user_id\", pm.response.json().data._id);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Miss\",\n    \"name\": \"Pakhi\",\n    \"phone\": 9888909091,\n    \"email\": \"p@gmail.com\",\n    \"password\": \"pass1234\",\n    \"address\": {\n        \"street\": \"14th cross street\",\n        \"city\": \"Bangalore\",\n        \"pincode\": \"560078\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/register",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "User login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 201\", function () {",
							"    try {",
							"        pm.response.to.have.status(201);",
							"    } catch (e) {",
							"        pm.response.to.have.status(200);",
							"    }",
							"});",
							"pm.test(\"User login has a correct successful response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.data).exist;",
							"});",
							"",
							"pm.collectionVariables.set(\"user_token\", pm.response.json().data.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\":\"p@gmail.com\",\n    \"password\":\"pass1234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/login",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Book Creation has a correct successful response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.data).exist;",
							"});",
							"",
							"pm.collectionVariables.set(\"book_id\", pm.response.json().data._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{user_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"What is life?\",\n    \"excerpt\": \"Free will\",\n    \"userId\": \"{{user_id}}\" ,\n    \"ISBN\": \"12341\",\n    \"category\": \"Science\",\n    \"subcategory\": \"Life Science\",\n    \"releasedAt\": \"1990-12-20\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/books",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Books fetch is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.message).exist;",
							"    pm.expect(jsonData.data).exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{user_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:3000/books",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books"
					],
					"query": [
						{
							"key": "userId",
							"value": "616420ea27acb1248abcdc85",
							"disabled": true
						},
						{
							"key": "category",
							"value": "Science Fiction",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a book's details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Book details is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.message).exist;",
							"    pm.expect(jsonData.data).exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{user_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "localhost:3000/books/{{book_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"{{book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Book update is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.message).exist;",
							"    pm.expect(jsonData.data).exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{user_token}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"excerpt\": \"Atticus rocks\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/books/{{book_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"{{book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Review creation is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.message).exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "x-api-key",
						"value": "{{user_token}}",
						"type": "default"
					}
				],
				"url": {
					"raw": "localhost:3000/books/{{book_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"{{book_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Review a book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"Review creation is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.message).exist;",
							"    pm.expect(jsonData.data).exist;",
							"});",
							"",
							"pm.collectionVariables.set(\"review_id\", pm.response.json().data.reviewsData._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"bookId\": \"6164272b339cbc2540b3027c\",\n    \"rating\": 3,\n    \"review\": \"very good\",\n    \"reviewedAt\": \"2021-02-19\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/books/{{book_id}}/review",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"{{book_id}}",
						"review"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a book's review",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Review update is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.message).exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"review\": \"110% would recommend\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/books/{{book_id}}/review/{{review_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"{{book_id}}",
						"review",
						"{{review_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a book's review",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Review deletion is successful\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(true);",
							"    pm.expect(jsonData.message).exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:3000/books/{{book_id}}/review/{{review_id}}",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"books",
						"{{book_id}}",
						"review",
						"{{review_id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "user_token",
			"value": ""
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "variable_key",
			"value": ""
		},
		{
			"key": "new_user_id",
			"value": ""
		},
		{
			"key": "book_id",
			"value": ""
		},
		{
			"key": "review_id",
			"value": ""
		}
	]
}




